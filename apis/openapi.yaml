openapi: 3.0.3
info:
  title: Social Network API
  description: API for a simple social network supporting users and posts.
  termsOfService: http://example.com/terms/
  contact:
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://api.example.com/v1
tags:
- name: user
  description: Operations related to users
- name: post
  description: Operations related to posts
paths:
  /users:
    get:
      tags:
      - user
      summary: Get a list of all users
      description: Retrieve a paginated list of all registered users.
      operationId: getUsers
      parameters:
      - name: page
        in: query
        description: The page number for pagination.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: The number of users per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                x-content-type: application/json
        "400":
          description: Invalid request parameters.
        "500":
          description: Internal server error.
      x-swagger-router-controller: User
    post:
      tags:
      - user
      summary: Add a new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
      x-swagger-router-controller: User
  /users/{userId}:
    get:
      tags:
      - user
      summary: Get a user by ID
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update a user by ID
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
      x-swagger-router-controller: User
  /posts:
    get:
      tags:
      - post
      summary: Get all posts
      operationId: getPosts
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                x-content-type: application/json
      x-swagger-router-controller: Post
    post:
      tags:
      - post
      summary: Add a new post
      operationId: addPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input
      x-swagger-router-controller: Post
  /posts/{postId}:
    get:
      tags:
      - post
      summary: Get a post by ID
      operationId: getPost
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
      x-swagger-router-controller: Post
    put:
      tags:
      - post
      summary: Update a post by ID
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "200":
          description: Post updated successfully
        "400":
          description: Invalid input
        "404":
          description: Post not found
      x-swagger-router-controller: Post
    delete:
      tags:
      - post
      summary: Delete a post by ID
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Post deleted successfully
        "404":
          description: Post not found
      x-swagger-router-controller: Post
  /users/{userId}/posts:
    get:
      tags:
      - post
      summary: Get all posts from a specific user
      operationId: getUserPosts
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of user's posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                x-content-type: application/json
        "404":
          description: User not found
      x-swagger-router-controller: Post
components:
  schemas:
    User:
      required:
      - email
      - id
      - username
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        username:
          type: string
          description: A unique name that identifies the user.
        email:
          type: string
          description: The user's email address.
          format: email
        createdAt:
          type: string
          description: The date and time when the user was created.
          format: date-time
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: id
        email: ""
        username: username
    Post:
      required:
      - content
      - id
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the post.
        userId:
          type: string
          description: The unique identifier of the post's author.
        content:
          type: string
          description: The text
      example:
        id: id
        userId: userId
        content: content
